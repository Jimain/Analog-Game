import org.newdawn.slick.*;
import org.newdawn.slick.geom.Point;
import java.util.ArrayList;
import java.util.Arrays;

public class patternGenerator   {

	ArrayList<Integer> ps = new ArrayList<Integer>();

	public patternGenerator() {



	}

	public void addNewPoint(int x, int y) {

		ps.add(x);

		ps.add(y);

		System.out.println(ps);

	}

	public ArrayList<Point> newPattern1() {

		int[] a = { 2, 150, 2, 151, 3, 151, 3, 152, 4, 152, 5, 152, 5, 153, 6, 153, 8, 153, 8, 154, 9, 154, 10, 155, 11,
				155, 12, 155, 15, 156, 17, 157, 18, 157, 19, 157, 21, 158, 24, 159, 27, 160, 29, 161, 35, 163, 36, 163,
				37, 164, 39, 164, 40, 164, 42, 165, 43, 166, 44, 166, 47, 167, 48, 167, 49, 167, 51, 168, 53, 168, 54,
				169, 55, 169, 56, 170, 57, 171, 58, 171, 60, 172, 61, 172, 62, 173, 64, 173, 66, 174, 67, 174, 68, 175,
				73, 177, 76, 178, 79, 179, 82, 180, 86, 181, 87, 182, 89, 183, 90, 183, 91, 184, 94, 185, 96, 185, 100,
				188, 102, 189, 105, 190, 106, 190, 108, 190, 109, 191, 110, 191, 112, 192, 114, 193, 116, 194, 119, 196,
				120, 196, 121, 197, 122, 197, 123, 197, 124, 198, 126, 198, 128, 199, 129, 200, 131, 201, 132, 201, 133,
				202, 135, 202, 136, 202, 138, 203, 139, 203, 140, 204, 141, 204, 142, 205, 143, 205, 145, 206, 146, 206,
				147, 207, 149, 208, 150, 208, 151, 209, 152, 209, 153, 209, 154, 210, 155, 210, 156, 211, 157, 211, 159,
				212, 162, 213, 165, 214, 166, 214, 167, 215, 168, 215, 169, 216, 170, 216, 171, 217, 172, 217, 173, 217,
				174, 218, 175, 218, 177, 219, 178, 219, 179, 220, 180, 220, 181, 220, 183, 221, 184, 222, 185, 222, 188,
				223, 192, 225, 194, 226, 195, 226, 196, 227, 198, 227, 199, 228, 201, 229, 202, 229, 203, 230, 205, 230,
				206, 231, 208, 231, 209, 232, 212, 234, 214, 234, 215, 235, 217, 235, 218, 236, 220, 237, 221, 238, 223,
				239, 225, 239, 227, 240, 228, 241, 230, 242, 232, 242, 233, 243, 235, 244, 237, 245, 238, 245, 240, 246,
				241, 247, 243, 248, 244, 248, 246, 249, 247, 249, 249, 251, 250, 251, 252, 252, 255, 254, 257, 254, 258,
				255, 261, 256, 262, 257, 264, 257, 266, 259, 267, 259, 269, 260, 271, 261, 273, 262, 275, 263, 280, 265,
				282, 266, 283, 266, 285, 268, 287, 268, 288, 269, 290, 270, 291, 270, 293, 271, 295, 271, 296, 272, 297,
				272, 299, 273, 300, 274, 302, 274, 303, 275, 304, 275, 306, 276, 307, 277, 309, 277, 310, 278, 312, 278,
				313, 279, 315, 280, 316, 280, 318, 281, 319, 281, 320, 282, 322, 282, 323, 283, 325, 284, 326, 284, 327,
				285, 329, 285, 330, 286, 331, 286, 335, 288, 336, 288, 338, 289, 339, 289, 340, 290, 342, 290, 343, 291,
				344, 292, 346, 292, 347, 293, 348, 293, 349, 294, 350, 294, 351, 295, 353, 296, 354, 297, 355, 297, 356,
				298, 357, 298, 358, 299, 359, 299, 360, 300, 361, 300, 362, 301, 363, 301, 365, 302, 367, 303, 368, 303,
				369, 304, 370, 304, 371, 305, 372, 306, 373, 306, 374, 307, 376, 307, 377, 308, 378, 308, 379, 309, 380,
				310, 381, 310, 383, 311, 385, 312, 387, 313, 388, 314, 390, 314, 392, 315, 393, 316, 394, 316, 395, 317,
				396, 317, 397, 318, 398, 318, 399, 319, 400, 319, 401, 320, 402, 320, 403, 321, 405, 322, 406, 322, 408,
				323, 409, 324, 410, 324, 412, 325, 413, 326, 414, 326, 415, 327, 417, 327, 418, 328, 419, 328, 421, 329,
				422, 330, 424, 330, 425, 331, 427, 331, 428, 332, 430, 333, 432, 334, 433, 334, 435, 335, 437, 336, 438,
				337, 440, 337, 442, 338, 443, 339, 445, 340, 446, 340, 448, 341, 450, 342, 451, 343, 453, 344, 454, 344,
				456, 345, 457, 346, 459, 347, 460, 348, 461, 348, 463, 349, 465, 350, 466, 351, 468, 351, 469, 352, 471,
				353, 472, 354, 474, 354, 475, 355, 477, 356, 478, 357, 479, 357, 482, 359, 485, 361, 486, 361, 488, 362,
				489, 362, 490, 363, 492, 364, 493, 364, 495, 365, 496, 366, 497, 366, 498, 367, 499, 367, 500, 368, 501,
				369, 502, 369, 503, 370, 504, 370, 506, 371, 507, 371, 508, 372, 509, 373, 510, 374, 511, 374, 513, 375,
				514, 375, 515, 376, 516, 376, 517, 377, 518, 377, 520, 378, 521, 378, 521, 379, 522, 379, 523, 380, 524,
				380, 525, 381, 526, 381, 527, 382, 528, 382, 529, 383, 530, 384, 531, 384, 532, 385, 534, 385, 535, 386,
				536, 386, 537, 387, 538, 387, 539, 388, 540, 388, 540, 389, 541, 389, 542, 390, 543, 390, 544, 391, 545,
				391, 546, 391, 547, 392, 548, 393, 549, 393, 550, 393, 551, 394, 552, 394, 552, 395, 553, 395, 554, 395,
				555, 395, 555, 396, 556, 396, 557, 397, 558, 397, 559, 397, 560, 398, 561, 398, 562, 398, 562, 399, 563,
				399, 563, 400, 564, 400, 565, 400, 565, 401, 566, 401, 567, 401, 567, 402, 568, 402, 569, 403, 570, 403,
				571, 403, 571, 404, 572, 404, 573, 404, 573, 405, 574, 405, 574, 406, 575, 406, 576, 406, 576, 407, 577,
				407, 578, 407, 578, 408, 579, 408, 580, 409, 581, 409, 581, 410, 582, 410, 583, 410, 584, 411, 585, 411,
				585, 412, 586, 412, 587, 413, 588, 413, 589, 413, 589, 414, 590, 414, 590, 415, 591, 415, 592, 416, 593,
				416, 593, 417, 594, 417, 594, 418, 594, 419, 594, 420 };

		ArrayList<Point> p = new ArrayList<Point>();

		for (int i = 0; i < a.length; i += 2) {
			if (i < a.length - 1) {
				Point pt = new Point(a[i], a[i + 1]);
				
				p.add(pt);
			}
		}
		return p;
	
	}
}

	